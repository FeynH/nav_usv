// Generated by gencpp from file nav_uas/Nav_msg.msg
// DO NOT EDIT!


#ifndef NAV_UAS_MESSAGE_NAV_MSG_H
#define NAV_UAS_MESSAGE_NAV_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav_uas
{
template <class ContainerAllocator>
struct Nav_msg_
{
  typedef Nav_msg_<ContainerAllocator> Type;

  Nav_msg_()
    : Angle(0.0)
    , Distance(0.0)
    , IsArrive(0)  {
    }
  Nav_msg_(const ContainerAllocator& _alloc)
    : Angle(0.0)
    , Distance(0.0)
    , IsArrive(0)  {
  (void)_alloc;
    }



   typedef double _Angle_type;
  _Angle_type Angle;

   typedef double _Distance_type;
  _Distance_type Distance;

   typedef int16_t _IsArrive_type;
  _IsArrive_type IsArrive;





  typedef boost::shared_ptr< ::nav_uas::Nav_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_uas::Nav_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Nav_msg_

typedef ::nav_uas::Nav_msg_<std::allocator<void> > Nav_msg;

typedef boost::shared_ptr< ::nav_uas::Nav_msg > Nav_msgPtr;
typedef boost::shared_ptr< ::nav_uas::Nav_msg const> Nav_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_uas::Nav_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_uas::Nav_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nav_uas

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'nav_uas': ['/home/ubuntu/Documents/test_ws/src/nav_uas/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nav_uas::Nav_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_uas::Nav_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_uas::Nav_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_uas::Nav_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_uas::Nav_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_uas::Nav_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_uas::Nav_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39a4dfb897b4de0e5aa5ba62412e2faf";
  }

  static const char* value(const ::nav_uas::Nav_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39a4dfb897b4de0eULL;
  static const uint64_t static_value2 = 0x5aa5ba62412e2fafULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_uas::Nav_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_uas/Nav_msg";
  }

  static const char* value(const ::nav_uas::Nav_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_uas::Nav_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Angle\n\
float64 Distance\n\
int16 IsArrive\n\
";
  }

  static const char* value(const ::nav_uas::Nav_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_uas::Nav_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Angle);
      stream.next(m.Distance);
      stream.next(m.IsArrive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Nav_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_uas::Nav_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_uas::Nav_msg_<ContainerAllocator>& v)
  {
    s << indent << "Angle: ";
    Printer<double>::stream(s, indent + "  ", v.Angle);
    s << indent << "Distance: ";
    Printer<double>::stream(s, indent + "  ", v.Distance);
    s << indent << "IsArrive: ";
    Printer<int16_t>::stream(s, indent + "  ", v.IsArrive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_UAS_MESSAGE_NAV_MSG_H
